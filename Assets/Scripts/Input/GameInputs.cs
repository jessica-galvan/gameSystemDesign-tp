//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Input/GameInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputs"",
    ""maps"": [
        {
            ""name"": ""Menu"",
            ""id"": ""cfb8e835-5ad4-4974-ac0c-9faeffb6dca6"",
            ""actions"": [
                {
                    ""name"": ""Selection"",
                    ""type"": ""Button"",
                    ""id"": ""516141fd-fcfa-406c-bc2e-c83cffb4434c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Resume"",
                    ""type"": ""Button"",
                    ""id"": ""6b6b60a6-fb4d-4918-ab6e-dcbcf45113fc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GoBack"",
                    ""type"": ""Button"",
                    ""id"": ""f0e2e99f-15ef-4676-bc85-ca3093c2a68b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""232a9844-8043-4358-921a-23deae4b57f0"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Selection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f2761b5-4fb0-4b99-9d60-3e45a37ffdfb"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Resume"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2f83072-fed8-4e78-b383-b44c700f62f4"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GoBack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Gameplay"",
            ""id"": ""95bcf82e-214e-405b-b5b6-b7652fdca658"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""7a3cbfb3-2e3a-4ba5-8a44-e0ca939615b4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""99df6301-55dc-4d0e-b370-524881767b56"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""cea2db47-dcbe-496d-bf20-79568de1b257"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePos"",
                    ""type"": ""Value"",
                    ""id"": ""90dd0c55-32ad-4d8f-8cf3-0fa5bd58a0a3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AbilityOne"",
                    ""type"": ""Button"",
                    ""id"": ""4c41bb2a-0e0a-4085-a81d-66984cf7420e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AbilityTwo"",
                    ""type"": ""Button"",
                    ""id"": ""3754e088-710b-4097-b709-1bcf359d4014"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AbilityThree"",
                    ""type"": ""Button"",
                    ""id"": ""4f7a5b25-e959-4974-ac9c-0a940295292f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""df42e4ad-ac9c-4398-9334-6d304716e4d8"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""60ee8d07-6033-4ed4-8b1b-424a5094f0ec"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c5f9c2b9-4f7b-4349-919e-1b59216579a9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""e02068af-9522-47e4-8167-a7497283621d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""470cef21-cf44-4dc7-a171-35b2091c2e03"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""5032b7bf-ef0d-4124-ba0b-1d34016b1d60"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e4f3a9bd-e835-459c-b6cd-834e78d7bee0"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""38c16a7e-2356-4863-a254-3ebf8d835c12"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""bc93d722-bc1d-42b4-83d9-47ec53e505f9"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8d654511-d455-46e7-ad0b-d6541ec10e84"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9a342718-d857-4aa3-9872-9fc387dd56c5"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6d51df12-0802-4525-ab5c-21d566b0179e"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e6ddf0f5-e4a1-4f74-b66e-a311761a8493"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af338281-c506-44c9-8a5a-1057f5e715c2"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AbilityOne"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5125cb29-71f5-498d-859d-8f9bf9e7c1e0"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AbilityTwo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa42afe7-eba4-40e8-b503-4e3604e4a9d6"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AbilityThree"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Cheats"",
            ""id"": ""c3c355be-48c4-4f18-a517-e133da66ff88"",
            ""actions"": [
                {
                    ""name"": ""AddMana"",
                    ""type"": ""Button"",
                    ""id"": ""daf223ef-509a-4893-8ecd-92573ddb27d5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayerInvinsible"",
                    ""type"": ""Button"",
                    ""id"": ""3fb8a721-1c14-4fad-bb63-449610c61c98"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fc74acc7-5c1f-4ff7-abe9-3e97c1e160ee"",
                    ""path"": ""<Keyboard>/f1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AddMana"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e1464242-91c8-474c-9a71-0f68b1e874e3"",
                    ""path"": ""<Keyboard>/f2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayerInvinsible"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Menu
        m_Menu = asset.FindActionMap("Menu", throwIfNotFound: true);
        m_Menu_Selection = m_Menu.FindAction("Selection", throwIfNotFound: true);
        m_Menu_Resume = m_Menu.FindAction("Resume", throwIfNotFound: true);
        m_Menu_GoBack = m_Menu.FindAction("GoBack", throwIfNotFound: true);
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Movement = m_Gameplay.FindAction("Movement", throwIfNotFound: true);
        m_Gameplay_Attack = m_Gameplay.FindAction("Attack", throwIfNotFound: true);
        m_Gameplay_Pause = m_Gameplay.FindAction("Pause", throwIfNotFound: true);
        m_Gameplay_MousePos = m_Gameplay.FindAction("MousePos", throwIfNotFound: true);
        m_Gameplay_AbilityOne = m_Gameplay.FindAction("AbilityOne", throwIfNotFound: true);
        m_Gameplay_AbilityTwo = m_Gameplay.FindAction("AbilityTwo", throwIfNotFound: true);
        m_Gameplay_AbilityThree = m_Gameplay.FindAction("AbilityThree", throwIfNotFound: true);
        // Cheats
        m_Cheats = asset.FindActionMap("Cheats", throwIfNotFound: true);
        m_Cheats_AddMana = m_Cheats.FindAction("AddMana", throwIfNotFound: true);
        m_Cheats_PlayerInvinsible = m_Cheats.FindAction("PlayerInvinsible", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Menu
    private readonly InputActionMap m_Menu;
    private IMenuActions m_MenuActionsCallbackInterface;
    private readonly InputAction m_Menu_Selection;
    private readonly InputAction m_Menu_Resume;
    private readonly InputAction m_Menu_GoBack;
    public struct MenuActions
    {
        private @GameInputs m_Wrapper;
        public MenuActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Selection => m_Wrapper.m_Menu_Selection;
        public InputAction @Resume => m_Wrapper.m_Menu_Resume;
        public InputAction @GoBack => m_Wrapper.m_Menu_GoBack;
        public InputActionMap Get() { return m_Wrapper.m_Menu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuActions set) { return set.Get(); }
        public void SetCallbacks(IMenuActions instance)
        {
            if (m_Wrapper.m_MenuActionsCallbackInterface != null)
            {
                @Selection.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnSelection;
                @Selection.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnSelection;
                @Selection.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnSelection;
                @Resume.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnResume;
                @Resume.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnResume;
                @Resume.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnResume;
                @GoBack.started -= m_Wrapper.m_MenuActionsCallbackInterface.OnGoBack;
                @GoBack.performed -= m_Wrapper.m_MenuActionsCallbackInterface.OnGoBack;
                @GoBack.canceled -= m_Wrapper.m_MenuActionsCallbackInterface.OnGoBack;
            }
            m_Wrapper.m_MenuActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Selection.started += instance.OnSelection;
                @Selection.performed += instance.OnSelection;
                @Selection.canceled += instance.OnSelection;
                @Resume.started += instance.OnResume;
                @Resume.performed += instance.OnResume;
                @Resume.canceled += instance.OnResume;
                @GoBack.started += instance.OnGoBack;
                @GoBack.performed += instance.OnGoBack;
                @GoBack.canceled += instance.OnGoBack;
            }
        }
    }
    public MenuActions @Menu => new MenuActions(this);

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_Gameplay_Movement;
    private readonly InputAction m_Gameplay_Attack;
    private readonly InputAction m_Gameplay_Pause;
    private readonly InputAction m_Gameplay_MousePos;
    private readonly InputAction m_Gameplay_AbilityOne;
    private readonly InputAction m_Gameplay_AbilityTwo;
    private readonly InputAction m_Gameplay_AbilityThree;
    public struct GameplayActions
    {
        private @GameInputs m_Wrapper;
        public GameplayActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Gameplay_Movement;
        public InputAction @Attack => m_Wrapper.m_Gameplay_Attack;
        public InputAction @Pause => m_Wrapper.m_Gameplay_Pause;
        public InputAction @MousePos => m_Wrapper.m_Gameplay_MousePos;
        public InputAction @AbilityOne => m_Wrapper.m_Gameplay_AbilityOne;
        public InputAction @AbilityTwo => m_Wrapper.m_Gameplay_AbilityTwo;
        public InputAction @AbilityThree => m_Wrapper.m_Gameplay_AbilityThree;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMovement;
                @Attack.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnAttack;
                @Pause.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPause;
                @MousePos.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMousePos;
                @MousePos.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMousePos;
                @MousePos.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMousePos;
                @AbilityOne.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnAbilityOne;
                @AbilityOne.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnAbilityOne;
                @AbilityOne.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnAbilityOne;
                @AbilityTwo.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnAbilityTwo;
                @AbilityTwo.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnAbilityTwo;
                @AbilityTwo.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnAbilityTwo;
                @AbilityThree.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnAbilityThree;
                @AbilityThree.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnAbilityThree;
                @AbilityThree.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnAbilityThree;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
                @MousePos.started += instance.OnMousePos;
                @MousePos.performed += instance.OnMousePos;
                @MousePos.canceled += instance.OnMousePos;
                @AbilityOne.started += instance.OnAbilityOne;
                @AbilityOne.performed += instance.OnAbilityOne;
                @AbilityOne.canceled += instance.OnAbilityOne;
                @AbilityTwo.started += instance.OnAbilityTwo;
                @AbilityTwo.performed += instance.OnAbilityTwo;
                @AbilityTwo.canceled += instance.OnAbilityTwo;
                @AbilityThree.started += instance.OnAbilityThree;
                @AbilityThree.performed += instance.OnAbilityThree;
                @AbilityThree.canceled += instance.OnAbilityThree;
            }
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);

    // Cheats
    private readonly InputActionMap m_Cheats;
    private ICheatsActions m_CheatsActionsCallbackInterface;
    private readonly InputAction m_Cheats_AddMana;
    private readonly InputAction m_Cheats_PlayerInvinsible;
    public struct CheatsActions
    {
        private @GameInputs m_Wrapper;
        public CheatsActions(@GameInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @AddMana => m_Wrapper.m_Cheats_AddMana;
        public InputAction @PlayerInvinsible => m_Wrapper.m_Cheats_PlayerInvinsible;
        public InputActionMap Get() { return m_Wrapper.m_Cheats; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CheatsActions set) { return set.Get(); }
        public void SetCallbacks(ICheatsActions instance)
        {
            if (m_Wrapper.m_CheatsActionsCallbackInterface != null)
            {
                @AddMana.started -= m_Wrapper.m_CheatsActionsCallbackInterface.OnAddMana;
                @AddMana.performed -= m_Wrapper.m_CheatsActionsCallbackInterface.OnAddMana;
                @AddMana.canceled -= m_Wrapper.m_CheatsActionsCallbackInterface.OnAddMana;
                @PlayerInvinsible.started -= m_Wrapper.m_CheatsActionsCallbackInterface.OnPlayerInvinsible;
                @PlayerInvinsible.performed -= m_Wrapper.m_CheatsActionsCallbackInterface.OnPlayerInvinsible;
                @PlayerInvinsible.canceled -= m_Wrapper.m_CheatsActionsCallbackInterface.OnPlayerInvinsible;
            }
            m_Wrapper.m_CheatsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @AddMana.started += instance.OnAddMana;
                @AddMana.performed += instance.OnAddMana;
                @AddMana.canceled += instance.OnAddMana;
                @PlayerInvinsible.started += instance.OnPlayerInvinsible;
                @PlayerInvinsible.performed += instance.OnPlayerInvinsible;
                @PlayerInvinsible.canceled += instance.OnPlayerInvinsible;
            }
        }
    }
    public CheatsActions @Cheats => new CheatsActions(this);
    public interface IMenuActions
    {
        void OnSelection(InputAction.CallbackContext context);
        void OnResume(InputAction.CallbackContext context);
        void OnGoBack(InputAction.CallbackContext context);
    }
    public interface IGameplayActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnMousePos(InputAction.CallbackContext context);
        void OnAbilityOne(InputAction.CallbackContext context);
        void OnAbilityTwo(InputAction.CallbackContext context);
        void OnAbilityThree(InputAction.CallbackContext context);
    }
    public interface ICheatsActions
    {
        void OnAddMana(InputAction.CallbackContext context);
        void OnPlayerInvinsible(InputAction.CallbackContext context);
    }
}
